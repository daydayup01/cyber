# 海莲花（APT-Q-31）组织数字武器Rust加载器技术分析  

原创威胁情报中心奇安信威胁情报中心2024-04-2210:13北京  

## I团伙背景  

海莲花，又名OceanLotus、APT32，奇安信内部跟踪编号APT-Q-31，是由奇安信威胁情报中心最早披露并命名的一个APT组织。自2012年4月起，海莲花针对中国政府、科研院所、海事机构、海域建设、航运企业等相关重要领域展开了有组织、有计划、有针对性的长时间不间断攻击。海莲花组织的攻击目标包括中国和东南亚地区多国，覆盖政府机构、科研院所、媒体、企业等诸多领域。该组织攻击手法多样，拥有完备的攻击武器库，常结合自研恶意软件、开源项目和商业工具实施攻击。  

## I概述  

奇安信威胁情报中心观察到海莲花在针对国内某目标的攻击活动中使用了一款由Rust编写的加载器，内存加载CobaltStrike木马。随后我们在开源平台发现了类似的恶意软件，这些恶意软件在Rust代码、中间阶段shellcode等方面的特征都与捕获的海莲花Rust加载器高度重合，因此我们认为它们也来自海莲花组织。接下来将以这些开源样本为基础对海莲花近期使用的Rust加载器进行分析。  

## I详细分析  

发现的Rust加载器样本如下  


<html><body><table><tr><td>MD5</td><td>VT上传时间</td><td>说明 64位EXE;</td><td></td></tr><tr><td>064cd0afb4dc27df 9d30c7f5209a8e5b</td><td>2024-01-24 16:3 8:44 UTC</td><td></td><td>HTTPS类型beacon木马; C&C : oo-advances-computers-interests.trycloudflar e.com</td></tr><tr><td>080c5ee76e27fb36 1b2e2946afc05cb6</td><td>2024-02-26 08:0 7:25 UTC</td><td></td><td>64位EXE; SMB类型beacon木马； 命名管道：ll.\pipe\mojo_b7</td></tr><tr><td>96520d209bd3f49 08843388a5643f4 98</td><td>2024-04-02 08:3 6:23 UTC</td><td></td><td>32位EXE; SMB类型beacon木马； 命名管道：Il.pipelWinsock2\CatalogChangeListener -738-0</td></tr><tr><td>3ada3a7ff12dbe5e 129b4aec7705184 3</td><td>2024-04-08 09:3 6:31 UTC</td><td></td><td>64位EXE; HTTPS类型beacon木马； C&C: guilty-patricia-connecticut-pulled.trycloudflar e.com</td></tr><tr><td>bf634036012335d 802fc6abc1a7787b d</td><td>2024-04-11 7:43 UTC</td><td>07:4</td><td>64位EXE; 尾部数据被删除</td></tr><tr><td>598544a350d496b acabfc5b905fae6a 4</td><td>2024-04-14 12:3 3:32UTC</td><td></td><td>64位EXE; HTTPS类型beacon木马; C&C：ecom.dfizm.com</td></tr></table></body></html>  

其中部分CS木马还利用Cloudflare Tunnel服务（trycloudflare.com下的子域名）[1]作为C&C服务器，隐藏真实服务器IP。  

## Quick Tunnels  

Developers can use the TryCloudflare tool to experiment with Cloudflare Tunnel without adding a site to Cloudflare's DNs.TryCloudflare will launch a process that generates a random subdomain on trycloudflare.com.Requests to that subdomainwill beproxied throughtheCloudflarenetworktoyourwebserverrunningonlocalhost.  

下面以样本598544a350d496bacabfc5b905fae6a4为例进行分析。  

### Rust加载器  

首先读取EXE文件自身数据。  

  

加密数据的长度保存在文件末尾倒数24字节位置，长度为0x4D838，用于XOR解密的key从文件末尾倒数20字节开始。  

  
海莲花（APT-Q-31）组织数字武器Rust切载器技术分析  

解密得到的内容如下，其中包含下一阶段的shellcode。  

  

根据计算，加密数据位于该样本文件的偏移位置0x462C1，而EXE最后一个段"reloc"在$0{\times}45000$ 处结束，可见加密数据是附加在原始EXE之后。  

  

加载器从"C:\\Windows\system32\"目录下选择一个DLL文件加载进内存。  

  

先将加载DLL的.text段对应内存空间访问权限修改为"读写"，再复制之前解密出的shellcode内容到.text段，并修改权限为"读写可执行"，最后执行shellcode。  

  

  

<html><body><table><tr><td>内存1</td><td>内存2</td><td></td><td>内存3</td><td></td><td>内存4</td><td>内存5</td><td></td><td>监视1</td><td>[x-]局部变量</td><td></td><td>结构体</td><td></td><td>000</td></tr><tr><td>地址</td><td></td><td>十六进制</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>ASCII</td><td></td><td></td><td>0001 0001</td></tr><tr><td colspan="2">000007FEF9E81000</td><td></td><td></td><td></td><td>4883EC10514883EC</td><td>20E80A0000004883</td><td></td><td></td><td></td><td></td><td>H.i.QH.i e....H.</td><td></td><td>0001</td></tr><tr><td>000007FEF9E81010</td><td></td><td></td><td>C4205948</td><td></td><td>83C410C3</td><td>E8FCC504</td><td></td><td>00</td><td>3600 32</td><td></td><td>AYH.A.AeuA..6.2</td><td></td><td>0001</td></tr><tr><td>000007FEF9E81020</td><td></td><td>00</td><td>3E0038</td><td></td><td>00160022</td><td>005E0060</td><td></td><td>00260006</td><td></td><td></td><td>.>.8..."...&..</td><td></td><td>0001</td></tr><tr><td>000007FEF9E8103000</td><td></td><td></td><td></td><td></td><td>3F005D00020012007B0021</td><td></td><td></td><td>00370071</td><td></td><td></td><td>?.l.....f.!.7.q</td><td></td><td>0001</td></tr></table></body></html>  

#### 第一阶段shellcode  

此次发现的大部分Rust加载器样本会使用第一阶段的shellcode再度解密并执行包含CSbeacon木马的第二阶段shellcode，而个别样本的第一阶段shellcode直接运行CSbeacon木马。  

如果是带有解密功能的第一阶段shellcode，首先定位配置数据的基地址位置，将其保存在rsi寄存器中。  

  

从r $\cdot\mathsf{s i}{\mathrm{+}}0\times428$ 位置获取第二阶段shellcode的长度（这里为0x4C0D0），保存在r14d寄存器中，然后调用VirtualAlloc分配具有可读写执行权限的内存。  

  

分配内存的起始地址（这里为0x4E0000）保存在r15寄存器中， $r5\mathrm{i}+0\times42\mathrm{C}$ 位置为第二阶段shellcode加密数据的起始地址。循环调用第一阶段shellcode偏移 $0{\times}4\mathsf{C}844$ （内存地址0x7FEFA9CD844）处的函数，每次解密8字节数据，解密结果保存在分配内存中。  

  

解密第二阶段shellcode完成后，直接调用执行。  

  

海莲花（APT-Q-31）组织数字武器Rus加载器技术分析  


<html><body><table><tr><td>内存1</td><td>内存2</td><td>内存3</td><td>内存4</td><td>内存5</td><td>监视1</td><td>[x=]局部变量</td><td>结构体</td><td></td></tr><tr><td colspan="9">地址</td></tr><tr><td>O0000000004E0000</td><td></td><td>十六进制</td><td>5</td><td></td><td></td><td></td><td>ASCII P<..f4.3..：.oU</td></tr><tr><td>00000000004E0010</td><td></td><td>4889E54881E400FFFFFF4881</td><td></td><td></td><td>ECOOOB00</td><td></td><td>H.aH.a.yyyH.i..</td></tr><tr><td>00000000004E0020</td><td></td><td></td><td></td><td></td><td></td><td></td><td>H..O...H.UaH.MD</td></tr><tr><td>O0000000004E0030</td><td></td><td>E805000000E9DE00000055FC4883E4FO</td><td></td><td></td><td></td><td>e....eP...UuH.a</td></tr></table></body></html>  

#### 第二阶段shellcode  

第二阶段shellcode中包含一个CSbeacon木马，内存加载执行。木马PE文件数据在偏移 $0\times10{\mathsf{C}}2$ 处，File Header结构的magic number修改为"4E 4F"（Ox4F4E）。  

  

提取beacon木马的配置信息，C2为ecom.dfizm[.]com:443。  

  

## I溯源关联  

这批Rust加载器恶意软件与之前捕获的海莲花攻击样本（MD5:c0271f7c0430f3ec4641e5a1436cf87f）在代码特征上高度重合。首先Rust部分代码几乎一致，第一阶段的shellcode也十分相似。  

  
海莲花（APT-Q-31）组织数字武器Rust切载器技术分析  

捕获的海莲花样本第二阶段shellcode有些不同，采用如下代码定位CSbeacon木马的位置，DosHeader结构的magicnumber改为 $0\times5041$ ，不过FileHeader结构的magicnumber仍使用0x4F4E。  

  

根据以上代码相似性，我们认为这些上传到VirusTotal平台的Rust加载器也与海莲花组织有关。  

此外，之前攻击活动中捕获到的海莲花样本CS配置数据中的license_id同样是987654321。  

  

实际上，开源样本中CS木马涉及的license_id共有2个。  

<html><body><table><tr><td>MD5</td><td>Beacon类型</td><td>License id</td></tr><tr><td>064cd0afb4dc27df9d30c7f5209a8e5b</td><td>HTTPS</td><td>1359593325</td></tr><tr><td>080c5ee76e27fb361b2e2946afc05cb6</td><td>SMB</td><td>1359593325</td></tr><tr><td>96520d209bd3f4908843388a5643f498</td><td>SMB</td><td>987654321</td></tr><tr><td>3ada3a7ff12dbe5e129b4aec77051843</td><td>HTTPS</td><td>1359593325</td></tr><tr><td>598544a350d496bacabfc5b905fae6a4</td><td>HTTPS</td><td>987654321</td></tr></table></body></html>  

但值得注意的是，这两个license_id对应的可能是破解版Cobalt Strike，现已被多个攻击团伙使用[2,3]，推测海莲花组织想借此模糊对Cobalt Strike攻击活动的归属。  

双异鼠组织使用的CobaltStrike工具来源于一种特殊的破解版本，该版本CobaltStrike工具生成的Beacon木马程序带有一个特殊的水印（watermark）编号1359593325。由于在CobaltStrike软件设计中，Beacon木马水印编号与CobaltStrike软件证书序列号一一对应，因此该1359593325特殊编号曾被当作与APT组织APT29关联的重要证据。伏影实验室研究确认， 当前该版本CobaltStrike软件许可证已经被多个APT组织或黑客组织滥用，不再能作为组织归因的决定性证据 而双异鼠组织正是利用了该水印编号，实现扮演APT29的“假旗"操作。  

目前，伪造CobaltStrike水印的常见方式是使用已泄露的CobaltStrike.auth文件生成木马载荷，同时由于水印编号硬编码于Beacon木马二进制文件中，也给通过文件读写直接篡改水印编号提供了可能。伏影实验室调查发现，双异鼠组织滥用的水印编号目前已被APT29、REvil、未知黑客组织甚至安全研究人员利用。  

SeveralfingerprintsofCobaltstrikewerefoundtobehostedonthissameIPaddress.OnPort88we founda defaultPOSThttprequestURIbasedon“Submit.php".Thebeaconwatermarkis987654321. It alsocorrespondstoacrackedversionof thepentestingtoolaccordingtoourdatabase.Forthis specificversion,notalotofinformationispubliclyavailableregardingintrusionsetsthatcouldhave leveragedit.HoweverMicrosoftreportedthat566uniquebeaconswerecollectedfromtheir telemetry.  

## I总结  

海莲花组织在近年来的攻击活动中不断更新攻击手法，此次发现的Rust加载器将后续载荷加密后附加到加载程序尾部，并试图用system32目录下合法DLL的内存空间存放待执行的shellcode，以避免触发安全软件的检测，同时滥用被多个黑客团体使用的Cobalt Strike水印混淆攻击归属。  

## I防护建议  

奇安信威胁情报中心提醒广大用户，谨防钓鱼攻击，切勿打开社交媒体分享的来历不明的链接，不点击执行未知来源的邮件附件，不运行标题夸张的未知文件，不安装非正规途径来源的APP。做到及时备份重要文件，更新安装补丁。  

若需运行，安装来历不明的应用，可先通过奇安信威胁情报文件深度分析平台（https://sandbox.ti.qianxin.com/sandbox/page）进行判别。目前已支持包括Windows、安卓平台在内的多种格式文件深度分析。  

目前，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC、奇安信态势感知等，都已经支持对此类攻击的精确检测。  

#  

### MD5  

064cd0afb4dc27df9d30c7f5209a8e5b  
080c5ee76e27fb361b2e2946afc05cb6  
96520d209bd3f4908843388a5643f498  
3ada3a7ff12dbe5e129b4aec77051843  
bf634036012335d802fc6abc1a7787bd  
598544a350d496bacabfc5b905fae6a4  

### c&C  

00-advances-computers-interests.trycloudflare.com guilty-patricia-connecticut-pulled.trycloudflare.com ecom.dfizm.com  

## I参考链接  

[1].https://developers.cloudflare.com/cloudflare-one/connections/connect-networ   
ks/do-more-with-tunnels/trycloudflare/   
[2].https://www.secrss.com/articles/60060   
[3].https://www.intrinsec.com/wp-content/uploads/2024/01/TLP-CLEAR-2024-01-0   
9-ThreeAM-EN-Information-report.pdf  